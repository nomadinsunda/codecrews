client:
  url: http://localhost:3000

server:
  url: http://localhost:8080

# AWS 설정
cloud:
  aws:
    s3:
      bucket: mynoticebucket
      stack.auto: false
    region:
      static: ap-northeast-2
    credentials:
      accessKey: ${AWS_ACCESS_KEY}
      secretKey: ${AWS_SECRET_KEY}

# Spring 설정
spring:
  datasource:
    url: jdbc:mysql://localhost:3306/noticeboard
    driver-class-name: com.mysql.cj.jdbc.Driver
    username: root
    password: ${DB_PASSWORD}
  sql:
    init:
      mode: always
  jpa:
    database: mysql
    database-platform: org.hibernate.dialect.MySQLDialect
    hibernate:
      ddl-auto: validate

  # Redis 설정
  data:
    redis:
      port: 6379
      host: localhost
      password: ${REDIS_PASSWORD}

  # Mail 설정
  mail:
    host: smtp.gmail.com
    port: 587
    username: ${MAIL_USERNAME}
    password: ${MAIL_PASSWORD}
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true

  # OAuth2 설정
  security:
    oauth2:
      client:
        registration:
          naver:
            authorization-grant-type: authorization_code
            client-id: ${NAVER_CLIENT_ID}
            client-secret: ${NAVER_CLIENT_SECRET}
            client-name: naver
            redirect-uri: http://localhost:8080/login/oauth2/code/naver
          google:
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_CLIENT_SECRET}
            scope: email, profile
            redirect-uri: http://localhost:8080/login/oauth2/code/google
        provider:
          naver:
            user-name-attribute: response
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            user-info-uri: https://openapi.naver.com/v1/nid/me
            token-uri: https://nid.naver.com/oauth2.0/token

  kafka:
    bootstrap-servers: localhost:9092

    consumer:
      group-id: noticeboard-chat-group
      auto-offset-reset: latest
      # ErrorHandlingDeserializer
      key-deserializer: org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
      properties:
        spring.deserializer.key.delegate.class: org.apache.kafka.common.serialization.StringDeserializer
        spring.deserializer.value.delegate.class: org.springframework.kafka.support.serializer.JsonDeserializer
        spring.json.trusted.packages: "com.example.noticeboard.meeting.chat.dto"
        spring.json.value.default.type: "com.example.noticeboard.meeting.chat.dto.ChatRequest"

    listener:
      missing-topics-fatal: false
